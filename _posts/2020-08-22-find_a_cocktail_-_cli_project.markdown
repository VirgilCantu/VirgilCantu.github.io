---
layout: post
title:      "Find a Cocktail - CLI Project"
date:       2020-08-22 23:35:04 +0000
permalink:  find_a_cocktail_-_cli_project
---


After making it out of the third week of Online Software Engineering at Flatiron School, after quite the tussle with object relationships, it was finally time to conquer the first summit: our CLI project. I hoped I had assimilated all of the knowledge of prior labs to tackle this project properly, but it didn't look promising. Intimidation set in the week prior, already falling behind and addressing Monday's labs well into Wednesday night. Finally, arriving at project week, I absorbed everything I could: how to structure the project and its relevant files properly, avoid common anti-patterns in code, and vigorously review the project requirements.

When it was time to piece the project together, almost as if unlocking a shuttered part of my brain, I started to make connections: object relationships, certain aspects of iteration, and other previously challenging topics suddenly made themselves apparent. I initially struggled to find a theme for this project. I was overthinking. Once I was more collected, I looked back at what I'd been doing for the past six years, bartending, working as a bar manager and beverage director, and implementing beverage programs. Cocktails were the chosen theme.

I quickly scoured the net for a cocktail API and found one on TheCocktailDB.com, a supremely useful resource. All the information I wanted to implement into the CLI was there. Recipes, ingredients, measurements, videos, images, and even a German translation for recipes. I swiftly started to construct the project. I assembled a flowchart on Lucidchart to thoroughly comprehend the organization of my code. After familiarizing myself with it and setting up the project's environment, gem dependencies, and repository on GitHub, I was ready to tackle the core of the task. I wanted to present the user with a CLI to search a known cocktail by name quickly, then return matching cocktails and explore their recipes. It seemed easy enough, but promptly tested my knowledge of working with instance classes and methods versus those of a class. A vital question came to mind, often repeated throughout the course: "Whose responsibility is it to track this information? The instance, or the class?"

An API, CLI, and Cocktail class were born. I  jumped to the task of obtaining and organizing the API's data, pulled the values I wanted to be part of every Cocktail class instance, and ensured the API class was successful in instantiating these objects. Handling the information for specific attributes proved difficult. The information on ingredients and values was nested strangely, but nothing a couple of iterations couldn't solve. I even learned a new method in the process, .zip, which allowed me to put the ingredient and measurement attributes together and organize them in a paired fashion in an excellent little array.

What followed proved one of the biggest hurdles for me in development; delineate precisely if the written methods belonged to the API, CLI, or Cocktail class. Should the API class tell you that your cocktail was not in the database, or is it the CLI class's job? Certain conventions became blurry, and hey, many roads lead to Rome. However, I attempted to write the cleanest code possible (as concisely as a complete amateur can), to avoid the seemingly scary proposition of refactoring code during the project review.

After many attempts at refactoring and several commits later, I concluded. The user could search for a cocktail, see it's information, be linked to a video or image, and search multiple times for different cocktails. No awkward nested exit loops, no bugs (yet), and all in working order. Although this was the first of many projects, it's safe to say I am hopeful for what the rest of this boot camp has in store. Already, I feel I am acquiring knowledge more quickly and obtaining confidence, that a month ago, was nowhere to be found. Onward and upward.  
